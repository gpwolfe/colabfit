#!/usr/bin/env python
# coding: utf-8

# In[ ]:

import os
from ase import Atoms

from colabfit.tools.database import MongoDatabase, load_data
from colabfit.tools.configuration import AtomicConfiguration

# from colabfit.tools.database import MongoDatabase, load_data
# from colabfit.tools.property_settings import PropertySettings
# from colabfit.tools.configuration import AtomicConfiguration
import numpy as np

# call database using its name
# drop_database=True means to start with fresh database
client = MongoDatabase(
    "new_data_test_alexander",
    configuration_type=AtomicConfiguration,
    nprocs=1,
    drop_database=True,
)


import sys

my_path_to_dataloader = "/large_data/new_raw_datasets/Transition1x/"
sys.path.append(my_path_to_dataloader)


def reader(path):
    from dataloader import Dataloader

    adl = Dataloader(path)
    images = []
    for data in adl:
        # for i in range(data['positions'].shape[0]):
        atoms = Atoms(symbols=data["atomic_numbers"], positions=data["positions"])

        # atoms.info['name'] = '{}_{}_conformer_{}'.format(os.path.split(path)[-1], data['path'], i)
        # print(data['positions'])
        atoms.info["per-atom"] = False

        atoms.info["energy"] = data["wB97x_6-31G(d).energy"]
        # print(atoms.info['energy'])
        atoms.info["atomization_energy"] = data["wB97x_6-31G(d).atomization_energy"]
        atoms.info["formula"] = data["formula"]
        atoms.arrays["forces"] = np.array(data["wB97x_6-31G(d).forces"])
        images.append(atoms)

    return images


# Loads data, specify reader function if not "usual" file format
configurations = list(
    load_data(
        file_path="/large_data/new_raw_datasets/Transition1x/",
        file_format="folder",
        name_field="formula",
        elements=["C", "H", "O", "N"],
        default_name="Transition1x",
        verbose=True,
        reader=reader,
        glob_string="*.h5",
    )
)
cs_list = set()
for c in configurations:
    cs_list.add(*c.info["_name"])
print(cs_list)

client.insert_property_definition("/home/ubuntu/notebooks/potential-energy.json")
client.insert_property_definition("/home/ubuntu/notebooks/atomic-forces.json")
# client.insert_property_definition('/home/ubuntu/notebooks/cauchy-stress.json')


atomization_property_definition = {
    "property-id": "atomization-energy",
    "property-name": "atomization-energy",
    "property-title": "energy minus molecular reference energy",
    "property-description": "the difference between energy and molecular reference energy",
    "energy": {
        "type": "float",
        "has-unit": True,
        "extent": [],
        "required": True,
        "description": "the difference between energy and molecular reference energy",
    },
}

client.insert_property_definition(atomization_property_definition)

property_map = {
    "potential-energy": [
        {
            "energy": {"field": "energy", "units": "eV"},
            "per-atom": {"field": "per-atom", "units": None},
            "_metadata": {
                "software": {"value": "ORCA 5.0.2"},
                "method": {"value": "DFT wb97x functional"},
                "basis": {"value": "6-31G(d) basis set"},
            },
        }
    ],
    "atomic-forces": [
        {
            "forces": {"field": "forces", "units": "eV/Ang"},
            "_metadata": {
                "software": {"value": "ORCA 5.0.2"},
                "method": {"value": "DFT wb97x functional"},
                "basis": {"value": "6-31G(d) basis set"},
            },
        }
    ],
    "atomization-energy": [
        {
            "energy": {"field": "atomization_energy", "units": "eV"},
            "_metadata": {
                "software": {"value": "ORCA 5.0.2"},
                "method": {"value": "DFT wb97x functional"},
                "basis": {"value": "6-31G(d) basis set"},
            },
        }
    ],
    #    'cauchy-stress': [{
    #       'stress':   {'field': 'virial',  'units': 'GPa'},
    #
    #                '_metadata': {
    #            'software': {'value':'VASP'},
    #        }
    #
    #    }],
}


def tform(c):
    c.info["per-atom"] = False


ids = list(
    client.insert_data(
        configurations,
        property_map=property_map,
        # generator=False,
        transform=tform,
        verbose=True,
    )
)

all_co_ids, all_pr_ids = list(zip(*ids))


# matches to data CO "name" field
cs_regexes = {
    ".*": "Dataset that contains DFT calculations of energy and forces for all"
    "configurations in QM9 recalculated with the wb97x functional and 6-31G(d) "
    "basis set. Recalculating the energy and forces causes a slight shift of the "
    "potential energy surface which results in forces acting on most configurations "
    "in the dataset. The data was generated by running Nudged Elastic Band (NEB) "
    "calculations with DFT on 10k reactions while saving intermediate calculations.",
}
cs_names = ["all"]
for i in cs_list:
    cs_regexes[i] = "Configurations with the formula %s." % i
    cs_names.append(i)


cs_ids = []

for i, (regex, desc) in enumerate(cs_regexes.items()):
    co_ids = client.get_data(
        "configurations",
        fields="hash",
        query={"hash": {"$in": all_co_ids}, "names": {"$regex": regex}},
        ravel=True,
    ).tolist()

    print(f"Configuration set {i}", f"({regex}):".rjust(22), f"{len(co_ids)}".rjust(7))

    cs_id = client.insert_configuration_set(co_ids, description=desc, name=cs_names[i])

    cs_ids.append(cs_id)


# In[ ]:


ds_id = client.insert_dataset(
    # cs_ids=cs_ids,
    pr_hashes=all_pr_ids,
    name="Transition1x",
    authors=[
        "Mathias Schreiner",
        "Arghya Bhowmik",
        "Tejs Vegge",
        "Jonas Busk",
        "Ole Winther",
    ],
    links=[
        "https://arxiv.org/abs/2207.12858",
        "https://gitlab.com/matschreiner/Transition1x/-/tree/main",
    ],
    description="Dataset that contains DFT calculations of energy and "
    "forces for all configurations in QM9 recalculated with the wb97x functional "
    "and 6-31G(d) basis set. Recalculating the energy and forces causes a slight "
    "shift of the potential energy surface which results in forces acting on most "
    "configurations in the dataset. The data was generated by running Nudged Elastic "
    "Band (NEB) calculations with DFT on 10k reactions while saving intermediate "
    "calculations.The dataset Transition1x containing 9.6 million Density Functional "
    "Theory (DFT) calculations of forces and energies of molecular configurations on "
    "and around reaction pathways at the wB97x/6-31G(d) level of theory.",
    resync=True,
    verbose=True,
)
